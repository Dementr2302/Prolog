%11
prost(X):-X1 is X-1, prost(X,X1).
prost(_,1):- !.
prost(X,Y) :- 0 is X mod Y,!, fail.
prost(X,Y):- Y1 is Y-1, prost(X,Y1).

sumUp(X,Sum):-sumUp(X,X,Sum),!.
sumUp(_,0,0):-!.
sumUp(X,Del,Sum):-D1 is Del-1, sumUp(X,D1,NewSum),
    (0 is X mod Del,prost(Del), Sum is NewSum+Del; Sum is NewSum).
    
sumDown(X,Sum):-sumDown(X,X,Sum,0),!.
sumDown(_,0,Sum,Sum):-!.
sumDown(X,Del,Sum,CurSum):-
    (0 is X mod Del,prost(Del), NewSum is CurSum+Del; NewSum is CurSum),
    D1 is Del-1, sumDown(X,D1,Sum,NewSum).

%12
sumCifr(X,Sum):- sumCifrDown(X,Sum,0).
sumCifrDown(0,Res,Res):-!.
sumCifrDown(X,Sum,CurSum):- X1 is X mod 10, NowSum is CurSum+X1,
    X2 is X div 10, sumCifrDown(X2,Sum,NowSum).

multDel(X,Res):- multDel(X,X,Res,1),!.
multDel(_,0,Res,Res):-!.
multDel(X,Del,Res,CurMult):-
    (0 is X mod Del,sumCifr(Del,Y),sumCifr(X,Z),Y<Z,
    NewMult is CurMult*Del; NewMult is CurMult),D1 is Del-1,
    multDel(X,D1,Res,NewMult).

%14
List([H|T],Res):-List([H|T],Res,0).
List([],Res,Res):-!.
List([_|T], Res,NowRes):-NewRes is NowRes+1, 
    List(T,Res,NewRes).


readList(0, []) :- !.
readList(I, [X|T]) :- write("input - "),read(X), I1 is I - 1, readList(I1, T).

write_list([]) :- !.
write_list([X|T]) :- write(X), nl, write_list(T).


%15
indexM([H|T], Ind):-indexM(T,Ind,0,1,H).
indexM([],Ind,Ind,_,_):-!.
indexM([H|T],Ind,IndexM,NowInd,MaxEl):-
    (H>=MaxEl, NewIndexM is NowInd,NewMax is H;
    NewIndexM is IndexM,NewMax is MaxEl),
    NewNowIndex is NowInd+1,
    indMax(T,Ind,NewIndexM,NewNowIndex,NewMax).

task15:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Number of elements after max: "),
    lenList(List,Len),indMax(List,IndexM),
    X is Len-IndexM-1, write(X),!.

%16

indMin([H|T],Ind):-indMin(T,Ind,0,1,H).
indMin([],Ind,Ind,_,_):-!.
indMin([H|T],Ind,IndMin,NowInd,MinEl):-
    (H<MinEl, NewIndMin is NowInd, NewMin is H;
    NewIndMin is IndMin, NewMin is MinEl),
    NewNowInd is NowInd+1,
    indMin(T,Ind,NewIndMin,NewNowInd,NewMin).
task16:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Index of min: "),indMin(List,Ind), write(Ind),!.


%17

concat([], List2, List2).
concat([H|T], List2, [H|NewList]) :- concat(T, List2, NewList).
moveBeforeMin([H|T],List):-indMin([H|T],IndMin),
    moveBeforeMin([H|T],List,IndMin,0,[]).
moveBeforeMin(L1,List,IndMin,IndMin,L2):- concat(L1,L2,List),!.
moveBeforeMin([H|T],List,IndMin,IndNow,NowList):- NewInd is IndNow+1, concat(NowList,[H],NewList),
    moveBeforeMin(T,List,IndMin,NewInd,NewList).

num17:- write("Input lenght for list: "), read(Count),readList(Count,List),moveBeforeMin(List,NewList),
    write("New List: "),write_list(NewList),!.

%18

LMin([F,S|_],0):-F<S,!.
LMin([F,S|T],Ind):-localMin(F,S,T,Ind,1).
localMin(F,S,[],Ind,Ind):-S<F,!.
localMin(F,S,[Next|_],Ind,Ind):-S<F,S<Next,!.
localMin(_,S,[Next|Tail],Ind,IndNow):-NextInd is IndNow+1,
    localMin(S,Next,Tail,Ind,NextInd).
    
task18:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Input index less then lenght: "),read(Index),
    write("This element is local min - "), LMin(List,Index).

%19

maxInterval([H|T],(A,B),Res):-(H>A,H<B, maxInterval(T,(A,B),H,Res),!;maxInterval(T,(A,B),Res)).
maxInterval([],_,Max,Max):-!.
maxInterval([H|T],(A,B),Max,Res):-(H>Max,H<B,H>A,NewMax is H; NewMax is Max),
    maxInterval(T,(A,B),NewMax,Res).

inter:-read(Count),readList(Count,List),
    write("Input a: "),read(A),write("Input b: "),read(B),
    maxInterval(List,(A,B),Res),
    write("Max element in (a,b) is "), write(Res),!.


%11
prost(1) :- !, fail.
prost(X) :- prost(X, 2).
prost(X, X) :- !.
prost(X, I) :- 0 =:= (X mod I), !, fail; I1 is I + 1, prost(X, I1), !.

Sum_Up(X, Res) :- sum1(X, X, Res).
sum1(_, 2, 1) :- !.
sum1(X, I, Res) :- I1 is I - 1, sum1(X, I1, Res1), (prost(I), 0 =:= (X mod I), Res is Res1 + I; Res is Res1), !.

Sum_Down(X, Res) :- sum1(X, X, 1, Res).
sum2(_, 2, Res, Res) :- !.
sum2(X, I, CurSum, Res) :- I1 is I - 1, (prost(I), 0 =:= (X mod I), !), NewSum is CurSum + I, sum2(X, I1, NewSum, Res);
                         I2 is I - 1, sum2(X, I2, CurSum, Res).

%12
sumCifr(X,Sum):- sumCifrDown(X,Sum,0).
sumCifrDown(0,Res,Res):-!.
sumCifrDown(X,Sum,CurSum):- X1 is X mod 10, NowSum is CurSum+X1,
    X2 is X div 10, sumCifrDown(X2,Sum,NowSum).

multDel(X,Res):- multDel(X,X,Res,1),!.
multDel(_,0,Res,Res):-!.
multDel(X,Del,Res,CurMult):-
    (0 is X mod Del,sumCifr(Del,Y),sumCifr(X,Z),Y<Z,
    NewMult is CurMult*Del; NewMult is CurMult),D1 is Del-1,
    multDel(X,D1,Res,NewMult).

%14
List([H|T],Res):-List([H|T],Res,0).
List([],Res,Res):-!.
List([_|T], Res,NowRes):-NewRes is NowRes+1, 
    List(T,Res,NewRes).


readList(0, []) :- !.
readList(I, [X|T]) :- write("input - "),read(X), I1 is I - 1, readList(I1, T).

write_list([]) :- !.
write_list([X|T]) :- write(X), nl, write_list(T).


%15

indMax([H|T], Ind):-indMax(T,Ind,0,1,H).
indMax([],Ind,Ind,_,_):-!.
indMax([H|T],Ind,IndMax,NowInd,MaxEl):-
    (H>=MaxEl, NewIndMax is NowInd,NewMax is H,!;
    NewIndMax is IndMax,NewMax is MaxEl),
    NewNowInd is NowInd+1,
    indMax(T,Ind,NewIndMax,NewNowInd,NewMax).

lenList([H|T],Res):-lenList([H|T],Res,0).
lenList([],Res,Res):-!.
lenList([_|T], Res,NowRes):-NewRes is NowRes+1,
    lenList(T,Res,NewRes).

indexM([H|T], Ind):-indexM(T,Ind,0,1,H).
indexM([],Ind,Ind,_,_):-!.
indexM([H|T],Ind,IndexM,NowInd,MaxEl):-
    (H>=MaxEl, NewIndexM is NowInd,NewMax is H;
    NewIndexM is IndexM,NewMax is MaxEl),
    NewNowIndex is NowInd+1,
    indMax(T,Ind,NewIndexM,NewNowIndex,NewMax).

task15:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Number of elements after max: "),
    lenList(List,Len),indMax(List,IndexM),
    X is Len-IndexM-1, write(X),!.

%16

indMin([H|T],Ind):-indMin(T,Ind,0,1,H).
indMin([],Ind,Ind,_,_):-!.
indMin([H|T],Ind,IndMin,NowInd,MinEl):-
    (H<MinEl, NewIndMin is NowInd, NewMin is H;
    NewIndMin is IndMin, NewMin is MinEl),
    NewNowInd is NowInd+1,
    indMin(T,Ind,NewIndMin,NewNowInd,NewMin).
task16:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Index of min: "),indMin(List,Ind), write(Ind),!.


%17

concat([], List2, List2).
concat([H|T], List2, [H|NewList]) :- concat(T, List2, NewList).
moveBeforeMin([H|T],List):-indMin([H|T],IndMin),
    moveBeforeMin([H|T],List,IndMin,0,[]).
moveBeforeMin(L1,List,IndMin,IndMin,L2):- concat(L1,L2,List),!.
moveBeforeMin([H|T],List,IndMin,IndNow,NowList):- NewInd is IndNow+1, concat(NowList,[H],NewList),
    moveBeforeMin(T,List,IndMin,NewInd,NewList).

num17:- write("Input lenght for list: "), read(Count),readList(Count,List),moveBeforeMin(List,NewList),
    write("New List: "),write_list(NewList),!.

%18

LMin([F,S|_],0):-F<S,!.
LMin([F,S|T],Ind):-localMin(F,S,T,Ind,1).
localMin(F,S,[],Ind,Ind):-S<F,!.
localMin(F,S,[Next|_],Ind,Ind):-S<F,S<Next,!.
localMin(_,S,[Next|Tail],Ind,IndNow):-NextInd is IndNow+1,
    localMin(S,Next,Tail,Ind,NextInd).
    
task18:-write("Input lenght for list: "), read(Count),readList(Count,List),
    write("Input index less then lenght: "),read(Index),
    write("This element is local min - "), LMin(List,Index).

%19

maxInterval([H|T],(A,B),Res):-(H>A,H<B, maxInterval(T,(A,B),H,Res),!;maxInterval(T,(A,B),Res)).
maxInterval([],_,Max,Max):-!.
maxInterval([H|T],(A,B),Max,Res):-(H>Max,H<B,H>A,NewMax is H; NewMax is Max),
    maxInterval(T,(A,B),NewMax,Res).

inter:-read(Count),readList(Count,List),
    write("Input a: "),read(A),write("Input b: "),read(B),
    maxInterval(List,(A,B),Res),
    write("Max element in (a,b) is "), write(Res),!.

%20

indMaxPair([H|T],(IF,IL)):-indMaxPair(T,(IF,IL),(0,0),H,1).
indMaxPair([],(IF,IL),(IF,IL),_,_):-!.
indMaxPair([H|T],(First,Last),(I1,I2),El,IndNow):-
    (H>El,IF is IndNow,IL is IndNow,NewEl is H;
    H is El, IL is IndNow, IF is I1,NewEl is H;
    IF is I1, IL is I2,NewEl is El),
    NextInd is IndNow+1,
    indMaxPair(T,(First,Last),(IF,IL),NewEl,NextInd).
findBetwMax(List,List2):-indMaxPair(List,(I1,I2)),findBetwMax(List,(I1,I2),List2,0,[]),!.
findBetwMax(_,(_,I2),List2,I2,List2):-!.
findBetwMax([H|T],(I1,I2),List2,NowInd,NowList):- 
    NewInd is NowInd+1,
    (NowInd>I1,concat(NowList,[H],Res),findBetwMax(T,(I1,I2),List2,NewInd,Res);
    findBetwMax(T,(I1,I2),List2,NewInd,NowList)).

task20:-write("Input lenght of list: "), read(Count),readList(Count,List),
    write("Elements between max: "), findBetwMax(List,X),nl, write_list(X).

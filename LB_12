%11
prost(X):-X1 is X-1, prost(X,X1).
prost(_,1):- !.
prost(X,Y) :- 0 is X mod Y,!, fail.
prost(X,Y):- Y1 is Y-1, prost(X,Y1).

sumUp(X,Sum):-sumUp(X,X,Sum),!.
sumUp(_,0,0):-!.
sumUp(X,Del,Sum):-D1 is Del-1, sumUp(X,D1,NewSum),
    (0 is X mod Del,prost(Del), Sum is NewSum+Del; Sum is NewSum).
    
sumDown(X,Sum):-sumDown(X,X,Sum,0),!.
sumDown(_,0,Sum,Sum):-!.
sumDown(X,Del,Sum,CurSum):-
    (0 is X mod Del,prost(Del), NewSum is CurSum+Del; NewSum is CurSum),
    D1 is Del-1, sumDown(X,D1,Sum,NewSum).

%12
sumCifr(X,Sum):- sumCifrDown(X,Sum,0).
sumCifrDown(0,Res,Res):-!.
sumCifrDown(X,Sum,CurSum):- X1 is X mod 10, NowSum is CurSum+X1,
    X2 is X div 10, sumCifrDown(X2,Sum,NowSum).

multDel(X,Res):- multDel(X,X,Res,1),!.
multDel(_,0,Res,Res):-!.
multDel(X,Del,Res,CurMult):-
    (0 is X mod Del,sumCifr(Del,Y),sumCifr(X,Z),Y<Z,
    NewMult is CurMult*Del; NewMult is CurMult),D1 is Del-1,
    multDel(X,D1,Res,NewMult).

%14
List([H|T],Res):-List([H|T],Res,0).
List([],Res,Res):-!.
List([_|T], Res,NowRes):-NewRes is NowRes+1, 
    List(T,Res,NewRes).


readList(0, []) :- !.
readList(I, [X|T]) :- write("input - "),read(X), I1 is I - 1, readList(I1, T).

write_list([]) :- !.
write_list([X|T]) :- write(X), nl, write_list(T).
